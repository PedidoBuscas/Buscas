import streamlit as st
from supabase_agent import SupabaseAgent
from datetime import datetime
import json
import unicodedata
import re


class ObjecaoManager:
    """Gerencia opera√ß√µes relacionadas √†s obje√ß√µes de marca"""

    # Status poss√≠veis para as obje√ß√µes
    STATUS_PENDENTE = "pendente"
    STATUS_RECEBIDO = "recebido"
    STATUS_EM_ANALISE = "em_analise"
    STATUS_CONCLUIDO = "concluido"

    def __init__(self, supabase_agent, email_agent):
        self.supabase_agent = supabase_agent
        self.email_agent = email_agent

    def atualizar_status_objecao(self, objecao_id: str, novo_status: str) -> bool:
        """
        Atualiza o status de uma obje√ß√£o.
        """
        if "jwt_token" not in st.session_state or not st.session_state.jwt_token:
            st.error("Voc√™ precisa estar logado para acessar esta funcionalidade.")
            st.stop()
        ok = self.supabase_agent.update_objecao_status(
            objecao_id, novo_status, st.session_state.jwt_token)
        if ok:
            status_text = self.supabase_agent.get_objecao_status_display(
                novo_status)
            st.success(f"Status da obje√ß√£o atualizado para: {status_text}")
            return True
        else:
            st.error("Erro ao atualizar status da obje√ß√£o!")
            return False

    def get_status_atual(self, objecao: dict) -> str:
        """
        Determina o status atual baseado em status_objecao persistente no banco.
        """
        status = objecao.get('status_objecao', self.STATUS_PENDENTE)
        if status not in [self.STATUS_PENDENTE, self.STATUS_RECEBIDO, self.STATUS_EM_ANALISE, self.STATUS_CONCLUIDO]:
            return self.STATUS_PENDENTE
        return status

    def separar_objecoes_por_status(self, objecoes: list) -> dict:
        """
        Separa as obje√ß√µes em listas por status.
        Retorna um dicion√°rio: {status: [obje√ß√µes]}
        """
        status_dict = {
            self.STATUS_PENDENTE: [],
            self.STATUS_RECEBIDO: [],
            self.STATUS_EM_ANALISE: [],
            self.STATUS_CONCLUIDO: []
        }
        for objecao in objecoes:
            status = self.get_status_atual(objecao)
            if status in status_dict:
                status_dict[status].append(objecao)
        return status_dict

    def enviar_documentos_objecao(self, objecao: dict, uploaded_files: list, tipo_usuario: str = "funcionario") -> bool:
        """
        Envia documentos da obje√ß√£o baseado no tipo de usu√°rio.
        tipo_usuario: "funcionario" (obejpdf) ou "advogado" (peticaopdf)
        """
        try:
            # Verificar se email_agent est√° inicializado
            if not self.email_agent:
                st.error("Email agent n√£o foi inicializado corretamente.")
                return False

            # Normalizar nome do arquivo
            def normalize_filename(filename):
                filename = unicodedata.normalize('NFKD', filename).encode(
                    'ASCII', 'ignore').decode('ASCII')
                filename = re.sub(r'[^a-zA-Z0-9_.-]', '_', filename)
                return filename

            # Upload dos PDFs
            pdf_urls = []
            for i, file in enumerate(uploaded_files):
                try:
                    file_name = normalize_filename(
                        f"{objecao['id']}_{file.name}")

                    # Verificar se o usu√°rio tem permiss√£o para upload
                    from permission_manager import CargoPermissionManager
                    from app import get_user_id

                    permission_manager = CargoPermissionManager(
                        st.session_state.supabase_agent)
                    user_id = get_user_id(st.session_state.user)
                    cargo_info = permission_manager.get_user_cargo_info(
                        user_id)

                    tipos_multiplos = cargo_info.get(
                        'tipos_multiplos', [cargo_info['tipo']])
                    pode_fazer_upload = 'juridico' in tipos_multiplos or cargo_info[
                        'tipo'] == 'juridico'

                    if not pode_fazer_upload:
                        st.error(
                            "Voc√™ precisa ser um usu√°rio jur√≠dico (advogado/funcion√°rio) para fazer upload de documentos.")
                        return False

                    url = self.supabase_agent.upload_pdf_to_storage(
                        file, file_name, st.session_state.jwt_token, bucket="obejecaopdf")
                    pdf_urls.append(url)

                except Exception as e:
                    st.error(f"Erro ao fazer upload de {file.name}: {str(e)}")
                    # Continuar com os outros arquivos mesmo se um falhar
                    continue

            # Verificar se pelo menos um arquivo foi enviado com sucesso
            if not pdf_urls:
                st.error(
                    "Nenhum arquivo foi enviado com sucesso. Verifique os erros acima.")
                return False

            # Preparar dados dos documentos para salvar no Supabase
            documentos_data = {
                "pdf_urls": pdf_urls,
                "data_envio": datetime.now().isoformat(),
                "arquivos": [{"nome": file.name, "url": url} for file, url in zip(uploaded_files, pdf_urls)]
            }

            # Atualizar coluna correta baseado no tipo de usu√°rio
            if tipo_usuario == "advogado":
                # Advogados salvam em peticaopdf
                self.supabase_agent.update_objecao_peticaopdf(
                    objecao['id'], documentos_data, st.session_state.jwt_token)
            else:
                # Funcion√°rios salvam em obejpdf
                self.supabase_agent.update_objecao_obejpdf(
                    objecao['id'], documentos_data, st.session_state.jwt_token)

            # Preparar anexos para e-mail no formato correto
            anexos = []
            for file in uploaded_files:
                pdf_bytes = file.getvalue()
                anexos.append({
                    "filename": file.name,
                    "content": pdf_bytes,
                    "content_type": "application/pdf"
                })

            # Usar o m√©todo espec√≠fico do EmailAgent para enviar e-mails
            emails_enviados = self.email_agent.enviar_emails_objecao_completa(
                objecao, anexos, self.supabase_agent)

            # Notificar sobre e-mails enviados
            if emails_enviados:
                st.success(
                    f"üìß E-mails enviados com sucesso para: {', '.join(emails_enviados)}")
            else:
                st.warning(
                    "‚ö†Ô∏è Nenhum e-mail foi enviado. Verifique as configura√ß√µes de e-mail.")

            # NOTA: Removida a altera√ß√£o autom√°tica de status para "Conclu√≠do"
            # O status deve ser alterado manualmente pelo usu√°rio quando apropriado
            # Uma obje√ß√£o rec√©m-criada deve permanecer como "pendente"

            return True

        except Exception as e:
            st.error(f"Erro ao enviar documentos: {str(e)}")
            return False


def limpar_formulario_objecao():
    """Limpa todos os dados do formul√°rio de obje√ß√£o"""
    # Incrementar a chave do formul√°rio para for√ßar recria√ß√£o dos widgets
    if "form_key" in st.session_state:
        st.session_state.form_key += 1

    # Limpar dados do formul√°rio
    if "form_data" in st.session_state:
        st.session_state.form_data = {
            "marca": "",
            "nomecliente": "",
            "vencimento": None,
            "servicocontrato": "",
            "observacao": "",
            "consultor_selecionado": ""
        }

    # Limpar lista de processos
    if "processos" in st.session_state:
        st.session_state.processos = []

    # Limpar cache de upload (usando chave din√¢mica)
    upload_key = f"upload_docs_{st.session_state.form_key}"
    if upload_key in st.session_state:
        del st.session_state[upload_key]


def solicitar_objecao(email_agent):
    """P√°gina para solicitar nova obje√ß√£o de marca"""

    # Verifica√ß√£o de seguran√ßa para email_agent
    if email_agent is None:
        st.error("Erro: email_agent n√£o foi inicializado corretamente.")
        return

    # Verifica√ß√£o de login
    if "jwt_token" not in st.session_state or not st.session_state.jwt_token:
        st.error("Voc√™ precisa estar logado para acessar esta funcionalidade.")
        st.stop()

    # Verificar se o usu√°rio n√£o √© consultor (cargo='consultor' na tabela perfil)
    user_id = st.session_state.user['id'] if isinstance(
        st.session_state.user, dict) else st.session_state.user.id

    # Buscar perfil do usu√°rio
    perfil = st.session_state.supabase_agent.get_profile(user_id)
    if perfil and perfil.get('cargo', '') == 'consultor':
        st.error("Voc√™ n√£o tem acesso a essa funcionalidade por enquanto. Esta funcionalidade est√° em desenvolvimento para consultores.")
        st.stop()

    # Inicializar dados apenas uma vez usando cache
    @st.cache_data
    def get_servicos_contrato():
        return [
            "",  # Op√ß√£o vazia para campo limpo
            "RECURSO DE MARCAS (EXCETO CONTRA INDEFERIMENTO DE PEDIDO DE REGISTRO DE MARCA)",
            "NULIDADE ADMINISTRATIVA DE REGISTRO DE MARCA",
            "CADUCIDADE",
            "MANIFESTA√á√ÉO CONTRA OPOSI√á√ÉO",
            "OPOSI√á√ÉO",
            "RECURSO COM DIVIS√ÉO DE PROCESSO (UMA CLASSE)",
            "MANIFESTA√á√ÉO CONTRA CADUCIDADE",
            "CONTRARRAZ√ÉO E/OU MANIFESTA√á√ÉO AO RECURSO/NULIDADE",
            "MANIFESTA√á√ÉO SOBRE PARECER PROFERIDO EM GRAU DE RECURSO",
            "RECURSO CONTRA INDEFERIMENTO DE PEDIDO DE REGISTRO DE MARCA",
            "NOTIFICA√á√ÉO EXTRAJUDICIAL"
        ]

    # Inicializar dados do formul√°rio
    if "form_key" not in st.session_state:
        st.session_state.form_key = 0

    if "form_data" not in st.session_state:
        st.session_state.form_data = {
            "marca": "",
            "nomecliente": "",
            "vencimento": None,
            "servicocontrato": "",
            "observacao": "",
            "consultor_selecionado": ""
        }

    if "processos" not in st.session_state:
        st.session_state.processos = []

    servicos_contrato = get_servicos_contrato()

    # Obter destinat√°rio jur√≠dico
    destinatario_juridico = email_agent.destinatario_juridico

    # T√≠tulo
    st.title("üìã Solicitar Obje√ß√£o de Marca")

    # Cache dos consultores
    @st.cache_data(ttl=3600)
    def get_consultores():
        try:
            consultores = st.session_state.supabase_agent.get_consultores_por_cargo(
                "consultor")
            return {c['name']: c['id'] for c in consultores}
        except Exception as e:
            return {"Consultor Padr√£o": "default"}

    consultor_options = get_consultores()

    # Formul√°rio √∫nico para evitar reruns (estilo patentes)
    with st.form(f"form_objecao_{st.session_state.form_key}"):
        # 1. Consultor respons√°vel
        st.subheader("Consultor Respons√°vel")
        consultor_selecionado = st.selectbox(
            "Selecionar Consultor",
            options=list(consultor_options.keys()),
            key=f"consultor_objecao_{st.session_state.form_key}",
            index=0
        )

        # 2. Dados b√°sicos
        st.subheader("Dados B√°sicos")
        marca = st.text_input("Marca", key=f"marca_{st.session_state.form_key}",
                              value=st.session_state.form_data["marca"])
        nomecliente = st.text_input(
            "Nome do Cliente", key=f"nomecliente_{st.session_state.form_key}",
            value=st.session_state.form_data["nomecliente"])
        vencimento = st.date_input(
            "Data de Vencimento", key=f"vencimento_{st.session_state.form_key}",
            value=st.session_state.form_data["vencimento"])

        servicocontrato = st.selectbox(
            "Servi√ßos do Contrato",
            options=servicos_contrato,
            key=f"servicocontrato_{st.session_state.form_key}",
            index=servicos_contrato.index(
                st.session_state.form_data["servicocontrato"]) if st.session_state.form_data["servicocontrato"] in servicos_contrato else 0
        )

        observacao = st.text_area(
            "Observa√ß√µes (opcional)", key=f"observacao_{st.session_state.form_key}",
            value=st.session_state.form_data["observacao"])

        # 3. Processos e Classifica√ß√µes (dentro do form)
        st.subheader("Processos e Classifica√ß√µes")
        st.info(
            "Adicione os processos e suas respectivas classes. Cada processo tem uma classe.")

        # Campos para adicionar processo (dentro do form)
        processo_numero = st.text_input(
            "N√∫mero do Processo", key=f"processo_numero_{st.session_state.form_key}")
        classe_nice = st.text_input(
            "Classe Nice", key=f"classe_nice_{st.session_state.form_key}")
        ncontrato = st.text_input(
            "N√∫mero do Contrato", key=f"ncontrato_{st.session_state.form_key}")

        # Bot√£o para adicionar processo (dentro do form)
        if st.form_submit_button("Adicionar Processo", type="secondary"):
            if processo_numero and classe_nice and ncontrato:
                processo_data = {
                    "numero": processo_numero,
                    "classe": classe_nice,
                    "contrato": ncontrato
                }
                st.session_state.processos.append(processo_data)
                st.success(f"Processo {processo_numero} adicionado!")
            else:
                st.error("Preencha o n√∫mero do processo, classe e contrato.")

        # 4. Upload de documentos (dentro do form)
        st.subheader("PDFs da Obje√ß√£o")
        uploaded_files = st.file_uploader(
            "Adicionar documentos (PDF)",
            type=['pdf'],
            accept_multiple_files=True,
            key=f"upload_docs_{st.session_state.form_key}"
        )

        # 5. Bot√£o de submit (dentro do form, no final)
        submitted = st.form_submit_button("Solicitar Obje√ß√£o")

    # Mostrar processos adicionados
    if st.session_state.processos:
        st.write("**Processos adicionados:**")
        for i, processo in enumerate(st.session_state.processos):
            with st.expander(f"Processo: {processo['numero']} - Contrato: {processo['contrato']}"):
                st.write(f"**N√∫mero:** {processo['numero']}")
                st.write(f"**Contrato:** {processo['contrato']}")
                st.write(f"**Classe:** {processo['classe']}")
                if st.button("Remover", key=f"remove_{i}"):
                    st.session_state.processos.pop(i)
                    st.success(f"Processo removido!")

    if submitted:
        # Verificar campos obrigat√≥rios b√°sicos
        if not all([marca, servicocontrato, nomecliente]):
            st.error("Por favor, preencha todos os campos obrigat√≥rios.")
            return

        # Verificar se h√° processos (seja da lista ou dos campos atuais)
        processos_para_adicionar = []
        if st.session_state.processos:
            processos_para_adicionar = st.session_state.processos
        elif processo_numero and classe_nice and ncontrato:
            # Adicionar processo dos campos atuais
            processos_para_adicionar = [{
                "numero": processo_numero,
                "classe": classe_nice,
                "contrato": ncontrato
            }]

        if not processos_para_adicionar:
            st.error("Por favor, adicione pelo menos um processo.")
            return

        # Carregar dados necess√°rios apenas quando for enviar
        with st.spinner("Enviando solicita√ß√£o, aguarde..."):
            # Verificar permiss√µes do usu√°rio apenas no envio
            try:
                from permission_manager import CargoPermissionManager
                from app import get_user_id

                permission_manager = CargoPermissionManager(
                    st.session_state.supabase_agent)
                user_id = get_user_id(st.session_state.user)
                cargo_info = permission_manager.get_user_cargo_info(user_id)

                tipos_multiplos = cargo_info.get(
                    'tipos_multiplos', [cargo_info['tipo']])
                pode_fazer_upload = 'juridico' in tipos_multiplos or cargo_info[
                    'tipo'] == 'juridico'
            except:
                pode_fazer_upload = True
                cargo_info = {"tipo": "default"}
            # Preparar dados da obje√ß√£o
            objecao_data = {
                "marca": marca,
                "servico": servicocontrato,  # Valor do selectbox vai para a coluna 'servico'
                "nomecliente": nomecliente,
                "vencimento": vencimento.isoformat() if vencimento else None,
                "servicocontrato": servicocontrato,
                "observacao": observacao,
                "processo": [p["numero"] for p in processos_para_adicionar],
                "classe": [p["classe"] for p in processos_para_adicionar],
                "ncontrato": [p["contrato"] for p in processos_para_adicionar],
                "consultor_objecao": consultor_options[consultor_selecionado],
                "juridico_id": st.session_state.user.get('id', 'default'),
                "status_objecao": "pendente"
            }

            # Inserir obje√ß√£o
            objecao_criada = st.session_state.supabase_agent.insert_objecao(
                objecao_data, st.session_state.jwt_token)
            if objecao_criada:
                st.success("Solicita√ß√£o sendo enviada!")

                # Processar arquivos enviados se houver
                if uploaded_files:
                    # Verificar se √© advogado ou funcion√°rio
                    is_advogado = cargo_info['tipo'] == 'juridico' and cargo_info.get(
                        'cargo') == 'advogado'
                    tipo_usuario = "advogado" if is_advogado else "funcionario"

                    # Processar os arquivos usando o ObjecaoManager
                    objecao_manager = ObjecaoManager(
                        st.session_state.supabase_agent, email_agent)
                    if objecao_manager.enviar_documentos_objecao(objecao_criada, uploaded_files, tipo_usuario):
                        pass  # Sucesso j√° foi notificado na fun√ß√£o enviar_documentos_objecao
                    else:
                        st.warning(
                            "Obje√ß√£o criada, mas houve erro ao enviar documentos.")
                else:
                    # Enviar e-mails de notifica√ß√£o apenas quando N√ÉO h√° documentos
                    emails_enviados = []

                    # 1. Enviar e-mail para consultor
                    if objecao_criada.get('email_consultor'):
                        try:
                            email_agent.enviar_email_nova_objecao(
                                objecao_criada['email_consultor'], objecao_criada)
                            emails_enviados.append(
                                f"consultor ({objecao_criada['email_consultor']})")
                        except Exception as e:
                            st.warning(
                                f"Erro ao enviar e-mail para consultor: {str(e)}")
                    else:
                        st.warning(
                            "E-mail do consultor n√£o encontrado na obje√ß√£o criada")

                    # 2. Enviar e-mail para destinat√°rio jur√≠dico
                    if destinatario_juridico:
                        try:
                            email_agent.enviar_email_nova_objecao(
                                destinatario_juridico, objecao_criada)
                            emails_enviados.append(
                                f"destinat√°rio jur√≠dico ({destinatario_juridico})")
                        except Exception as e:
                            st.warning(
                                f"Erro ao enviar e-mail para destinat√°rio jur√≠dico: {str(e)}")
                    else:
                        st.warning(
                            f"‚ö†Ô∏è Destinat√°rio jur√≠dico n√£o configurado. E-mail n√£o ser√° enviado.")

                    # 3. Enviar e-mail para destinat√°rio jur√≠dico adicional
                    destinatario_juridico_um = email_agent.destinatario_juridico_um
                    if destinatario_juridico_um:
                        try:
                            email_agent.enviar_email_nova_objecao(
                                destinatario_juridico_um, objecao_criada)
                            emails_enviados.append(
                                f"destinat√°rio jur√≠dico adicional ({destinatario_juridico_um})")
                        except Exception as e:
                            st.warning(
                                f"Erro ao enviar e-mail para destinat√°rio jur√≠dico adicional: {str(e)}")
                    else:
                        st.warning(
                            f"‚ö†Ô∏è Destinat√°rio jur√≠dico adicional n√£o configurado. E-mail n√£o ser√° enviado.")

                    # Notificar sobre e-mails enviados
                    if emails_enviados:
                        st.success(
                            f"üìß E-mails de notifica√ß√£o enviados para: {', '.join(emails_enviados)}")
                    else:
                        st.warning(
                            "‚ö†Ô∏è Nenhum e-mail de notifica√ß√£o foi enviado.")

                # Limpar formul√°rio ap√≥s envio bem-sucedido
                limpar_formulario_objecao()
                st.success(
                    "‚úÖ Formul√°rio limpo! Voc√™ pode criar uma nova obje√ß√£o.")
                st.rerun()
            else:
                st.error("Erro ao solicitar obje√ß√£o!")
                st.info(
                    "A obje√ß√£o pode ter sido criada, mas houve erro ao retornar os dados. Verifique em 'Minhas Obje√ß√µes'.")


def minhas_objecoes(email_agent):
    """P√°gina para visualizar obje√ß√µes do usu√°rio"""
    # Verifica√ß√£o de seguran√ßa para email_agent
    if email_agent is None:
        st.error("Erro: email_agent n√£o foi inicializado corretamente.")
        return

    st.title("üìã Minhas Obje√ß√µes de Marca")

    if "jwt_token" not in st.session_state or not st.session_state.jwt_token:
        st.error("Voc√™ precisa estar logado para acessar esta funcionalidade.")
        st.stop()

    # Verificar se √© admin usando o permission_manager
    from permission_manager import CargoPermissionManager
    from app import get_user_id

    permission_manager = CargoPermissionManager(
        st.session_state.supabase_agent)
    user_id = get_user_id(st.session_state.user)
    cargo_info = permission_manager.get_user_cargo_info(user_id)
    is_admin = cargo_info['is_admin'] is True

    # Buscar obje√ß√µes baseado no tipo de usu√°rio
    if is_admin:
        # Admin v√™ todas as obje√ß√µes
        objecoes = st.session_state.supabase_agent.get_all_objecoes(
            st.session_state.jwt_token)
    else:
        # Verificar se √© usu√°rio jur√≠dico ou consultor
        tipos_multiplos = cargo_info.get(
            'tipos_multiplos', [cargo_info['tipo']])

        if 'juridico' in tipos_multiplos or cargo_info['tipo'] == 'juridico':
            # Usu√°rio jur√≠dico v√™ suas pr√≥prias obje√ß√µes criadas
            objecoes = st.session_state.supabase_agent.get_objecoes_by_juridico(
                user_id, st.session_state.jwt_token)
        else:
            # Consultor v√™ obje√ß√µes onde ele √© o consultor respons√°vel
            objecoes = st.session_state.supabase_agent.get_objecoes_by_consultor(
                user_id, st.session_state.jwt_token)

    if not objecoes:
        st.info("Nenhuma obje√ß√£o encontrada.")
        return

    # Inicializar manager
    objecao_manager = ObjecaoManager(
        st.session_state.supabase_agent, email_agent)

    # Separar obje√ß√µes por status
    objecoes_por_status = objecao_manager.separar_objecoes_por_status(objecoes)

    # Criar tabs para cada status
    tabs = st.tabs([
        f"‚è≥ Pendentes ({len(objecoes_por_status[objecao_manager.STATUS_PENDENTE])})",
        f"üì• Recebidas ({len(objecoes_por_status[objecao_manager.STATUS_RECEBIDO])})",
        f"üîç Em An√°lise ({len(objecoes_por_status[objecao_manager.STATUS_EM_ANALISE])})",
        f"‚úÖ Conclu√≠das ({len(objecoes_por_status[objecao_manager.STATUS_CONCLUIDO])})"
    ])

    # Renderizar obje√ß√µes em cada tab
    status_list = [
        objecao_manager.STATUS_PENDENTE,
        objecao_manager.STATUS_RECEBIDO,
        objecao_manager.STATUS_EM_ANALISE,
        objecao_manager.STATUS_CONCLUIDO
    ]

    for i, status in enumerate(status_list):
        with tabs[i]:
            objecoes_list = objecoes_por_status.get(status, [])
            if not objecoes_list:
                st.info(f"Nenhuma obje√ß√£o {status}.")
                continue

            for objecao in objecoes_list:
                renderizar_objecao(objecao, objecao_manager, is_admin)


def renderizar_objecao(objecao, objecao_manager, is_admin):
    """Renderiza uma obje√ß√£o individual"""
    # Preparar informa√ß√µes para o t√≠tulo do card
    marca = objecao.get('marca', 'N/A')
    cliente = objecao.get('nomecliente', 'N/A')
    servico = objecao.get('servico', 'N/A')
    consultor = objecao.get(
        'name_consultor', objecao.get('consultor_objecao', 'N/A'))

    # Formatar data
    data_criacao = ""
    if objecao.get('created_at'):
        data_criacao = formatar_data_br(objecao['created_at'])

    # Criar t√≠tulo do card
    titulo_card = f"üìã {marca} - {cliente}"
    if servico and servico != 'N/A':
        titulo_card += f" | {servico}"
    if data_criacao:
        titulo_card += f" | {data_criacao}"
    if consultor and consultor != 'N/A':
        titulo_card += f" | {consultor}"

    with st.expander(titulo_card):
        # Informa√ß√µes b√°sicas organizadas (uma abaixo da outra)
        st.write(f"**Marca:** {objecao.get('marca', 'N/A')}")
        st.write(f"**Cliente:** {objecao.get('nomecliente', 'N/A')}")
        st.write(f"**Servi√ßo:** {objecao.get('servico', 'N/A')}")
        if objecao.get('created_at'):
            data_criacao = formatar_data_br(objecao['created_at'])
            st.write(f"**Criado em:** {data_criacao}")
        if objecao.get('name_consultor'):
            st.write(f"**Consultor:** {objecao.get('name_consultor', 'N/A')}")
        elif objecao.get('consultor_objecao'):
            st.write(
                f"**Consultor:** {objecao.get('consultor_objecao', 'N/A')}")

        # Dados dos processos
        processos = objecao.get('processo', [])
        classes = objecao.get('classe', [])
        contratos = objecao.get('ncontrato', [])

        if processos:
            st.write("**üìã Processos:**")
            for i in range(len(processos)):
                processo_num = processos[i] if i < len(processos) else 'N/A'
                classe_num = classes[i] if i < len(classes) else 'N/A'
                contrato_num = contratos[i] if i < len(contratos) else 'N/A'

                st.write(f"  **Processo {i+1}:** {processo_num}")
                st.write(f"    **Contrato:** {contrato_num}")
                st.write(f"    **Classe:** {classe_num}")

        # Observa√ß√µes
        if objecao.get('observacao'):
            st.write(f"**üìù Observa√ß√µes:** {objecao.get('observacao')}")

        # Status atual (sempre por √∫ltimo)
        status_atual = objecao_manager.get_status_atual(objecao)
        status_icon = st.session_state.supabase_agent.get_objecao_status_icon(
            status_atual)
        status_text = st.session_state.supabase_agent.get_objecao_status_display(
            status_atual)
        st.write(f"{status_icon} **Status:** {status_text}")

        # Controles de status (apenas para admin jur√≠dico)
        from permission_manager import CargoPermissionManager
        from app import get_user_id

        permission_manager = CargoPermissionManager(
            st.session_state.supabase_agent)
        user_id = get_user_id(st.session_state.user)
        cargo_info = permission_manager.get_user_cargo_info(user_id)
        is_admin_juridico = cargo_info['tipo'] == 'juridico' and cargo_info['is_admin'] is True

        if is_admin_juridico:
            st.subheader("Alterar Status")

            # Bot√µes para avan√ßar para o pr√≥ximo status (sempre na coluna 1)
            if status_atual == objecao_manager.STATUS_PENDENTE:
                if st.button("üì• Recebida", key=f"btn_recebida_{objecao['id']}"):
                    objecao_manager.atualizar_status_objecao(
                        objecao['id'], objecao_manager.STATUS_RECEBIDO)
                    st.rerun()

            elif status_atual == objecao_manager.STATUS_RECEBIDO:
                if st.button("üîç Em An√°lise", key=f"btn_analise_{objecao['id']}"):
                    objecao_manager.atualizar_status_objecao(
                        objecao['id'], objecao_manager.STATUS_EM_ANALISE)
                    st.rerun()

            elif status_atual == objecao_manager.STATUS_EM_ANALISE:
                if st.button("‚úÖ Conclu√≠da", key=f"btn_concluida_{objecao['id']}"):
                    objecao_manager.atualizar_status_objecao(
                        objecao['id'], objecao_manager.STATUS_CONCLUIDO)
                    st.rerun()

                    # Exibir PDFs existentes
        st.subheader("üìÑ Documentos")

        # Verificar se h√° PDFs em obejpdf (funcion√°rios)
        if objecao.get('obejpdf'):
            try:
                obejpdf_data = objecao['obejpdf']
                if isinstance(obejpdf_data, dict) and obejpdf_data.get('pdf_urls'):
                    st.write("**üìé Documentos enviados por funcion√°rio:**")
                    for i, url in enumerate(obejpdf_data['pdf_urls']):
                        if url:
                            st.markdown(f"[üìé Documento {i+1}]({url})")
            except Exception as e:
                st.warning(f"Erro ao carregar documentos: {str(e)}")

        # Verificar se h√° PDFs em peticaopdf (advogados)
        if objecao.get('peticaopdf'):
            try:
                peticaopdf_data = objecao['peticaopdf']
                if isinstance(peticaopdf_data, dict) and peticaopdf_data.get('pdf_urls'):
                    st.write("**üìÑ Peti√ß√µes enviadas por advogado:**")
                    for i, url in enumerate(peticaopdf_data['pdf_urls']):
                        if url:
                            st.markdown(f"[üìÑ Peti√ß√£o {i+1}]({url})")
            except Exception as e:
                st.warning(f"Erro ao carregar peti√ß√µes: {str(e)}")

        # Upload de documentos (apenas quando status for "Em An√°lise")
        if status_atual == objecao_manager.STATUS_EM_ANALISE:
            # Determinar tipo de usu√°rio
            from permission_manager import CargoPermissionManager
            from app import get_user_id

            permission_manager = CargoPermissionManager(
                st.session_state.supabase_agent)
            user_id = get_user_id(st.session_state.user)
            cargo_info = permission_manager.get_user_cargo_info(user_id)

            # Verificar se √© advogado ou funcion√°rio
            is_advogado = cargo_info['tipo'] == 'juridico' and cargo_info['cargo'] == 'advogado'
            is_funcionario = cargo_info['tipo'] == 'juridico' and cargo_info['cargo'] == 'funcionario'

            # Apenas usu√°rios jur√≠dicos podem fazer upload
            if cargo_info['tipo'] != 'juridico':
                st.info(
                    "Apenas usu√°rios jur√≠dicos (advogados/funcion√°rios) podem fazer upload de documentos.")
            elif is_advogado:
                st.subheader("üìÑ Peti√ß√µes")
                uploaded_files = st.file_uploader(
                    "Adicionar peti√ß√µes (PDF)",
                    type=['pdf'],
                    accept_multiple_files=True,
                    key=f"upload_peticoes_{objecao['id']}"
                )

                if uploaded_files and st.button("Enviar Peti√ß√µes", key=f"btn_upload_peticoes_{objecao['id']}"):
                    with st.spinner("Enviando peti√ß√µes e notificando por e-mail..."):
                        if objecao_manager.enviar_documentos_objecao(
                                objecao, uploaded_files, tipo_usuario="advogado"):
                            st.success(
                                "üìÑ Peti√ß√µes enviadas com sucesso! E-mails enviados para consultor e funcion√°rio.")

                            # Alterar status automaticamente para "Conclu√≠do" quando advogado envia peti√ß√µes
                            try:
                                objecao_manager.atualizar_status_objecao(
                                    objecao['id'], objecao_manager.STATUS_CONCLUIDO)
                                st.success(
                                    "‚úÖ Status automaticamente alterado para 'Conclu√≠do'!")
                            except Exception as e:
                                st.warning(
                                    f"Peti√ß√µes enviadas, mas erro ao alterar status: {str(e)}")

                            st.rerun()
                        else:
                            st.error(
                                "Erro ao enviar peti√ß√µes. Verifique os logs.")

            elif is_funcionario:
                st.subheader("üìé Documentos")
                uploaded_files = st.file_uploader(
                    "Adicionar documentos (PDF)",
                    type=['pdf'],
                    accept_multiple_files=True,
                    key=f"upload_docs_{objecao['id']}"
                )

                if uploaded_files and st.button("Enviar Documentos", key=f"btn_upload_docs_{objecao['id']}"):
                    with st.spinner("Enviando documentos e notificando por e-mail..."):
                        if objecao_manager.enviar_documentos_objecao(
                                objecao, uploaded_files, tipo_usuario="funcionario"):
                            st.success(
                                "üìé Documentos enviados com sucesso! E-mails enviados para consultor e funcion√°rio.")
                            st.rerun()
                        else:
                            st.error(
                                "Erro ao enviar documentos. Verifique os logs.")


def formatar_data_br(data_iso):
    """Formata data ISO para formato brasileiro"""
    try:
        data = datetime.fromisoformat(data_iso.replace('Z', '+00:00'))
        return data.strftime("%d/%m/%Y %H:%M")
    except:
        return data_iso
